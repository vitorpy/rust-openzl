{
  "permissions": {
    "allow": [
      "Bash(git submodule:*)",
      "Bash(cargo build:*)",
      "Bash(VERBOSE=1 cargo build -p openzl-sys)",
      "Bash(cargo clean:*)",
      "Bash(nm:*)",
      "Bash(cargo test:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nImplement Step 9: High-level ergonomic APIs (MVP completion)\n\nAdded user-friendly compression functions for common use cases:\n\nNew APIs:\n- compress_numeric<T>(&[T]) - Optimized numeric array compression using NUMERIC graph\n- decompress_numeric<T>(&[u8]) -> Vec<T> - Type-safe numeric decompression\n- Supports all numeric types: u8, u16, u32, u64, i8, i16, i32, i64, f32, f64\n\nFeatures:\n- Automatic graph selection (NUMERIC graph for numeric data)\n- Type validation at compile-time and runtime\n- Element width verification for safety\n- Complete round-trip guarantees\n\nTests: 6 new tests for different numeric types (u16, u32, u64, i32, f32, f64)\nAll tests pass: 16 passed, 2 ignored (as expected)\n\nDocumentation: Added docstring examples for both functions\n\nThis completes the MVP (Minimum Viable Product) for rust-openzl:\n✓ Serial compression/decompression\n✓ Compression graphs (core functionality)\n✓ TypedRef wrappers\n✓ TypedBuffer wrappers\n✓ High-level ergonomic APIs for numeric data\n\nCleaned up compiler warnings with #[allow(dead_code)] for future features.\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
